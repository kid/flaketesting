# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.9)
{
  # A helpful description of your flake
  description = "My NixOS Configuration as a Flake";

  # Flake inputs
  inputs = {
    fh.url = "https://flakehub.com/f/DeterminateSystems/fh/0.1.9.tar.gz";
    flake-schemas.url = "https://flakehub.com/f/DeterminateSystems/flake-schemas/*.tar.gz";

    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/0.1.*.tar.gz";

    nix-github-actions.url = "github:nix-community/nix-github-actions";
    nix-github-actions.inputs.nixpkgs.follows = "nixpkgs";
  };

  # Flake outputs that other flakes can use
  outputs = { self, flake-schemas, nixpkgs, ... } @ inputs:
    let
      # Helpers for producing system-specific outputs
      supportedSystems = [ "x86_64-linux" "aarch64-linux" "aarch64-darwin" ];
      forEachSupportedSystem = f: nixpkgs.lib.genAttrs supportedSystems (system: f {
        pkgs = import nixpkgs {
          inherit system;
          overlays = [ inputs.fh.overlays.default ];
        };
      });
    in
    {
      # Schemas tell Nix about the structure of your flake's outputs
      schemas = flake-schemas.schemas;

      # Development environments
      devShells = forEachSupportedSystem ({ pkgs }: {
        default = pkgs.mkShell {
          # Pinned packages available in the environment
          packages = with pkgs; [
            nixpkgs-fmt
            nil
            fh
          ];
        };
      });

      nixosConfigurations = {
        workvm = nixpkgs.lib.nixosSystem {
          system = "x86_64-linux";
          modules = [
            ./hosts/workvm
          ];
        };
        workvm-aarch64 = nixpkgs.lib.nixosSystem {
          system = "aarch64-linux";
          modules = [
            ./hosts/workvm
          ];
        };
        workvm-darwin = nixpkgs.lib.nixosSystem {
          system = "x86_64-linux";
          modules = [
            ./hosts/workvm
            { virtualisation.host.pkgs = nixpkgs.legacyPackages.aarch64-darwin; }
          ];
        };
      };

      packages = {
        x86_64-linux.hello = nixpkgs.legacyPackages.x86_64-linux.hello;
        x86_64-linux.workvm = self.nixosConfigurations.workvm.config.system.build.vm;
        aarch64-linux.workvm = self.nixosConfigurations.workvm-aarch64.config.system.build.vm;
        aarch64-darwin.workvm = self.nixosConfigurations.workvm-darwin.config.system.build.vm;
      };

      githubActions = inputs.nix-github-actions.lib.mkGithubMatrix {
        checks = nixpkgs.lib.getAttrs [ "x86_64-linux" ] self.packages;
      };
    };

  nixConfig = {
    extra-substituters = [
      "https://nix-community.cachix.org"
      "https://kidibox.cachix.org"
    ];
    extra-trusted-public-keys = [
      "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
      "kidibox.cachix.org-1:BN875x9JUW61souPxjf7eA5Uh2k3A1OSA1JIb/axGGE="
    ];
  };
}
